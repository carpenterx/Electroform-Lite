// <auto-generated />
using System;
using ElectroformLite.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectroformLite.Infrastructure.Migrations
{
    [DbContext(typeof(ElectroformDbContext))]
    partial class ElectroformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AliasTemplateTemplate", b =>
                {
                    b.Property<Guid>("AliasTemplatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AliasTemplatesId", "TemplatesId");

                    b.HasIndex("TemplatesId");

                    b.ToTable("AliasTemplateTemplate");
                });

            modelBuilder.Entity("DataGroupTemplateDataTemplate", b =>
                {
                    b.Property<Guid>("DataGroupTemplatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataTemplatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DataGroupTemplatesId", "DataTemplatesId");

                    b.HasIndex("DataTemplatesId");

                    b.ToTable("DataGroupTemplateDataTemplate");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Alias", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AliasTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AliasTemplateId");

                    b.HasIndex("DataGroupId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Aliases");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.AliasTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataGroupTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DataGroupTemplateId");

                    b.ToTable("AliasTemplates");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Data", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DataGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DataGroupId");

                    b.HasIndex("DataTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataGroupTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DataGroupTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("DataGroups");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroupTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DataGroupTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DataGroupTypeId");

                    b.ToTable("DataGroupTemplates");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroupType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DataGroupTypes");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.ToTable("DataTemplates");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DataTypes");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AliasTemplateTemplate", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.AliasTemplate", null)
                        .WithMany()
                        .HasForeignKey("AliasTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroformLite.Domain.Models.Template", null)
                        .WithMany()
                        .HasForeignKey("TemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataGroupTemplateDataTemplate", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.DataGroupTemplate", null)
                        .WithMany()
                        .HasForeignKey("DataGroupTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroformLite.Domain.Models.DataTemplate", null)
                        .WithMany()
                        .HasForeignKey("DataTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Alias", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.AliasTemplate", "AliasTemplate")
                        .WithMany("Aliases")
                        .HasForeignKey("AliasTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroformLite.Domain.Models.DataGroup", "DataGroup")
                        .WithMany("Aliases")
                        .HasForeignKey("DataGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroformLite.Domain.Models.Document", null)
                        .WithMany("Aliases")
                        .HasForeignKey("DocumentId");

                    b.Navigation("AliasTemplate");

                    b.Navigation("DataGroup");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.AliasTemplate", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.DataGroupTemplate", "DataGroupTemplate")
                        .WithMany("AliasTemplates")
                        .HasForeignKey("DataGroupTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataGroupTemplate");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Data", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.DataGroup", null)
                        .WithMany("UserData")
                        .HasForeignKey("DataGroupId");

                    b.HasOne("ElectroformLite.Domain.Models.DataTemplate", "DataTemplate")
                        .WithMany("UserData")
                        .HasForeignKey("DataTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroformLite.Domain.Models.User", null)
                        .WithMany("UserData")
                        .HasForeignKey("UserId");

                    b.Navigation("DataTemplate");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroup", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.DataGroupTemplate", "DataGroupTemplate")
                        .WithMany("DataGroups")
                        .HasForeignKey("DataGroupTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroformLite.Domain.Models.User", null)
                        .WithMany("DataGroups")
                        .HasForeignKey("UserId");

                    b.Navigation("DataGroupTemplate");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroupTemplate", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.DataGroupType", null)
                        .WithMany("DataGroupTemplates")
                        .HasForeignKey("DataGroupTypeId");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataTemplate", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.DataType", "DataType")
                        .WithMany("DataTemplates")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Document", b =>
                {
                    b.HasOne("ElectroformLite.Domain.Models.Template", null)
                        .WithMany("Documents")
                        .HasForeignKey("TemplateId");

                    b.HasOne("ElectroformLite.Domain.Models.User", null)
                        .WithMany("Documents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.AliasTemplate", b =>
                {
                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroup", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroupTemplate", b =>
                {
                    b.Navigation("AliasTemplates");

                    b.Navigation("DataGroups");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataGroupType", b =>
                {
                    b.Navigation("DataGroupTemplates");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataTemplate", b =>
                {
                    b.Navigation("UserData");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.DataType", b =>
                {
                    b.Navigation("DataTemplates");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Document", b =>
                {
                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.Template", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ElectroformLite.Domain.Models.User", b =>
                {
                    b.Navigation("DataGroups");

                    b.Navigation("Documents");

                    b.Navigation("UserData");
                });
#pragma warning restore 612, 618
        }
    }
}
